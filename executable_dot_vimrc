"Plugins 
call plug#begin('~/.vim/plugged')
" Example config in VimScript
" Enable telescope theme

" Enable transparent mode

" Load the colorscheme
" lsp win bar
" Plug 'danielpieper/telescope-tmuxinator.nvim'
" telescope
Plug 'rebelot/kanagawa.nvim'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

" git branch management
Plug 'junegunn/vim-easy-align'
" Plug 'vim-airline/vim-airline'
Plug 'Yggdroot/indentLine'
Plug 'kyazdani42/nvim-web-devicons' " for file icons
"Plug 'glepnir/galaxyline.nvim' , {'branch': 'main'}
Plug 'ryanoasis/vim-devicons'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'


"__________ tree sitter ______________-
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
Plug 'nvim-treesitter/nvim-treesitter-textobjects'

" On-demand lazy load
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
Plug 'puremourning/vimspector'
Plug 'szw/vim-maximizer'
Plug 'unblevable/quick-scope'
Plug 'ackyshake/vim-fist'
Plug 'ThePrimeagen/vim-be-good', {'do': './install.sh'}
"Targets
Plug 'wellle/targets.vim'

"Color 
"
Plug 'norcalli/nvim-colorizer.lua'
Plug 'jpalardy/vim-slime'
Plug 'junegunn/gv.vim'
Plug 'tmhedberg/SimpylFold'
Plug 'tpope/vim-commentary'
Plug 'justinmk/vim-sneak'

"Latex Compilation 
Plug 'lervag/vimtex'

Plug 'skywind3000/asyncrun.vim'
Plug 'psliwka/vim-smoothie'

"Fuzzy Findder
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf'

" Git Based  
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'sheerun/vim-polyglot'
Plug 'sodapopcan/vim-twiggy'

"Themes
Plug 'morhetz/gruvbox'

"___________ Status Line
Plug 'nvim-lualine/lualine.nvim'

"Tmux related plugin
Plug 'christoomey/vim-tmux-navigator'

" File Explorer 
"Development related plugins 
"Ctags 
Plug 'ludovicchabant/vim-gutentags'

" AutoCompletion for python
"Plug 'deoplete-plugins/deoplete-jedi'
Plug 'neovim/nvim-lspconfig'

Plug 'SmiteshP/nvim-navic'

"___________ Distraction free mode for writing ___"
Plug 'junegunn/goyo.vim'

"____________ Snippets _____________________"
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'

Plug 'mhinz/vim-signify'

Plug 'mbbill/undotree'

Plug 'brooth/far.vim'
Plug 'theHamsta/nvim-dap-virtual-text'
" __ change surround text
"  add a new keyword to vim language that is s
"  eg. csi'" change 'Hello world!' to  "Hello world!"
Plug 'tpope/vim-surround'
Plug 'nvim-telescope/telescope-dap.nvim'
" _______________ Debug Adapter Protocol ______________
Plug 'mfussenegger/nvim-dap'
Plug 'mfussenegger/nvim-dap-python'
Plug 'rcarriga/nvim-dap-ui'
" _______________ Color / Themes
Plug 'marko-cerovac/material.nvim'
" If you want to have icons in your statusline choose one of these
Plug 'kyazdani42/nvim-web-devicons'
Plug 'lewis6991/gitsigns.nvim'

" Tabline Plugin 
Plug 'romgrk/barbar.nvim'

Plug 'ThePrimeagen/git-worktree.nvim'
call plug#end()


" __________ Load the colorscheme
colorscheme kanagawa
set termguicolors
let g:gruvbox_contrast_dark = "medium"


" ___________ Lua Line Config
set showtabline=2
lua << EOF
require('lualine').setup {
  options = {
    icons_enabled = false,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff'},
    lualine_c = {},
    lualine_x = {},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  winbar = {},
  inactive_winbar = {},
  extensions = {}
}
EOF
lua << EOF
require('telescope').setup()
require('telescope').load_extension('dap')
EOF

nnoremap <leader>df:Telescope dap frames<CR>
nnoremap <leader>dc:Telescope dap commands<CR>
nnoremap <leader>db:Telescope dap list_breakpoints<CR>

lua <<EOF
require("dapui").setup()
require("nvim-dap-virtual-text").setup()

EOF

let g:dap_virtual_text = v:true
nnoremap <leader>dq :lua require("dapui").toggle()<CR>

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"



"______________ Keymaps ________________ "
let mapleader = " "
"Slip Window
nmap <leader>s :split<Return><C-w>w
nmap sv :vsplit<Return><C-w>w
" Fuzzy file finder mapping 
nnoremap <silent> <leader>f :FZF<cr>
nnoremap <silent> <leader>F :FZF ~<cr>
" Zooom in and out of windows
noremap Zz <c-w>_ \| <c-w>\|
noremap Zo <c-w>=
" nnoremap <leader><leader> :GFiles<CR>
nnoremap <leader>fi :Files<CR>
nnoremap <leader>ft       :BTags<CR>
nnoremap <leader>pt       :Tags<CR>
inoremap jk <ESC>

nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k
" Rg current word in under cursor
nnoremap <silent><Leader>rr :Rg <C-R><C-W><CR>

"++++++++++++++++++++++++++++++++++++++
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'ctrl-y': {lines -> setreg('+', join(lines, "\n"))}}
" next previous buffer
" 
map <leader>bd :bd<cr>

" ____ buffer nav
" nnoremap <s-l>:bnext<CR>
" nnoremap <s-h>:bprevious<CR>

nnoremap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bnext<CR>
nnoremap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bprevious<CR>
nnoremap <Leader>ff :Telescope Buffers<CR>
nnoremap <leader><leader> <cmd>Telescope buffers<cr>

" Open Nerd Tree by default
let g:deoplete#enable_at_startup = 1

"set Gdiff to open vertical split
set diffopt+=vertical
set number
set spelllang=en_us
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u
syntax enable
set background=dark
let g:gruvbox_contrast_dark = "medium"

"Latex Setting 
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=2
let g:tex_conceal="abdgm"
" set g:conceallevel=0
" let g:tex_conceal='abdmg'




" Custom Mapping 
set relativenumber
""""""""""""""""""
"  FZF MAPPINGS  "
""""""""""""""""""


set tabstop=2 shiftwidth=2 expandtab

"set vim to copy by default to system clipboard
set clipboard=unnamedplus

"To prevent x to write to unmaedplus clipboard
nnoremap x "_x 
nnoremap X "_x 

"add commnet
augroup highlight_yank
    autocmd!
    autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank({timeout = 40})
augroup END
let g:slime_target = "tmux"
nnoremap <Leader>c :IPythonCellExecuteCell<CR>
" https://vi.stackexchange.com/questions/8382/vim-doesnt-use-the-correct-indentation-in-python-files


"------------------------------------------------------------------------------
" ipython-cell configuration
"------------------------------------------------------------------------------
" Keyboard mappings. <Leader> is \ (backslash) by default

" " map <Leader>s to start IPython
" nnoremap <Leader>s :SlimeSend1 ipython --matplotlib<CR>

" " map <Leader>r to run script
" nnoremap <Leader>r :IPythonCellRun<CR>

" " map <Leader>R to run script and time the execution
" nnoremap <Leader>R :IPythonCellRunTime<CR>

" " map <Leader>c to execute the current cell
" nnoremap <Leader>c :IPythonCellExecuteCell<CR>

" " map <Leader>C to execute the current cell and jump to the next cell
" nnoremap <Leader>C :IPythonCellExecuteCellJump<CR>

" " map <Leader>l to clear IPython screen
" nnoremap <Leader>l :IPythonCellClear<CR>

" " map <Leader>x to close all Matplotlib figure windows
" nnoremap <Leader>x :IPythonCellClose<CR>

" " map [c and ]c to jump to the previous and next cell header
" nnoremap [c :IPythonCellPrevCell<CR>
" nnoremap ]c :IPythonCellNextCell<CR>

" map <Leader>h to send the current line or current selection to IPython
nmap <Leader>h <Plug>SlimeLineSend
xmap <Leader>h <Plug>SlimeRegionSend

" " map <Leader>p to run the previous command
" nnoremap <Leader>p :IPythonCellPrevCommand<CR>

" " map <Leader>Q to restart ipython
" nnoremap <Leader>Q :IPythonCellRestart<CR>

" " map <Leader>d to start debug mode
" nnoremap <Leader>d :SlimeSend1 %debug<CR>

" " map <Leader>q to exit debug mode or IPython
" nnoremap <Leader>q :SlimeSend1 exit<CR>
" nnoremap U :syntax sync fromstart<cr>:redraw!<cr>
" nnoremap <C-l> <C-i>
" let g:goto_header_includes_dirs = [".", "/usr/include", "..", "~"]
" let g:goto_header_use_find = 0      " keep using fd
" let g:goto_header_search_flags = "-t f -s"
" let g:goto_header_excludes_dirs = []
" let g:goto_header_open_in_new_tab = 0
" let g:goto_header_use_shorter_path = 0
" nnoremap gh :GotoHeaderSwitch <CR>
nnoremap <C-g> :Rg<Cr>
" nnoremap <leader>vv :grep <cword> */**<CR>:cwindow<CR>
" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Trigger a highlight only when pressing f and F.
" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

highlight QuickScopePrimary guifg='#00C7DF' gui=underline ctermfg=155 cterm=underline
highlight QuickScopeSecondary guifg='#afff5f' gui=underline ctermfg=81 cterm=underline

let g:qs_max_chars=150


set nofoldenable

" Debugging
"let g:vimspector_enable_mappings = 'HUMAN'
"nmap <leader>dd :call vimspector#Launch()<CR>
"nmap <leader>dx :call vimspector#Reset()<CR>
"nmap <leader>de :VimspectorEval 
"nmap <leader>dw :VimspectorWatch 
"nmap <leader>do :VimspectorShowOutput
"nnoremap <silent> <Leader>rg :Rg <C-R><C-W><CR>
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

"nnoremap <leader>m :MaximizerToggle!<CR>
"nmap <leader>drc <Plug>VimspectorRunToCursor
"nmap <Leader>di <Plug>VimspectorBalloonEval
"" for visual mode, the visually selected text
"xmap <Leader>di <Plug>VimspectorBalloonEval

nmap <leader>gj :diffget //3<CR>
nmap <leader>gk :diffget //2<CR>
nmap <leader>gs :G<CR>
xnoremap <unique> <leader>do :diffget<CR>
xnoremap <unique> <leader>dp :diffput<CR>
" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

highlight QuickScopePrimary guifg='#00C7DF' gui=underline ctermfg=155 cterm=underline
highlight QuickScopeSecondary guifg='#afff5f' gui=underline ctermfg=81 cterm=underline

" case insensitive sneak
let g:sneak#use_ic_scs = 1

" immediately move to the next instance of search, if you move the cursor sneak is back to default behavior
let g:sneak#s_next = 1

" remap so I can use , and ; with f and t


let g:sneak#label = 1
" Change the colors
highlight Sneak guifg=black guibg=#00C7DF ctermfg=black ctermbg=cyan
highlight SneakScope guifg=red guibg=yellow ctermfg=red ctermbg=yellow

" Cool prompts
" let g:sneak#prompt = '🕵'
let g:sneak#prompt = '🔎'

" I like quickscope better for this since it keeps me in the scope of a single line
map s <Plug>Sneak_s
map S <Plug>Sneak_S

" Change the colors
highlight Sneak guifg=black guibg=#00C7DF ctermfg=black ctermbg=cyan
highlight SneakScope guifg=red guibg=yellow ctermfg=red ctermbg=yellow
"map gS <Plug>Sneak_,
"map gs <Plug>Sneak_;

" case insensitive sneak
let g:sneak#use_ic_scs = 1

let g:sneak#s_next = 0
" map F <Plug>Sneak_F
" map t <Plug>Sneak_t
" map T <Plug>Sneak_T
"
fun! GotoWindow(id)
    call win_gotoid(a:id)
    MaximizerToggle
endfun

command! -bang -nargs=* CustomBLines
    \ call fzf#vim#grep(
    \   'ag --with-filename --column --line-number --no-heading --smart-case . '.fnameescape(expand('%:p')), 1,
    \   fzf#vim#with_preview({'options': '--layout reverse --query '.shellescape(<q-args>).' --with-nth=4.. --delimiter=":"'}, 'right:50%'))
    " \   fzf#vim#with_preview({'options': '--layout reverse  --with-nth=-1.. --delimiter="/"'}, 'right:50%'))

command! -nargs=+ Bag
  \ call fzf#vim#grep('ag --vimgrep '.shellescape(<q-args>).' '.shellescape(expand('%')), 1)

" enable tabline
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#formatter = 'unique_tail'
" let g:airline#extensions#tabline#left_sep = ' '

" enable powerline fonts
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''

" Switch to your current theme
let g:airline_theme = 'gruvbox'


" We don't need to see things like -- INSERT -- anymore
set noshowmode
let g:twiggy_split_position = 'rightbelow'
set cmdheight=1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeDirArrows = 1

" Start NERDTree and put the cursor back in the other window.
" autocmd VimEnter * NERDTree | wincmd p
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
nnoremap <Leader>t :Twiggy<Enter>
let g:tex_comment_nospell=1
let g:vimtex_syntax_conceal_default = 0


" Debug Adapter Protocol
lua require('dap-python').setup('~/.virtualenvs/debugpy/bin/python')

lua << EOF
vim.fn.sign_define('DapBreakpoint', {text='🟥', texthl='', linehl='', numhl=''})
vim.fn.sign_define('DapStopped', {text='⭐️', texthl='', linehl='', numhl=''})
EOF

nnoremap <leader>dh :lua require'dap'.toggle_breakpoint()<CR>
nnoremap <S-k> :lua require'dap'.step_out()<CR>
nnoremap <S-l> :lua require'dap'.step_into()<CR>
nnoremap <S-j> :lua require'dap'.step_over()<CR>
nnoremap <leader>ds :lua require'dap'.stop()<CR>
nnoremap <leader>dn :lua require'dap'.continue()<CR>
nnoremap <leader>dk :lua require'dap'.up()<CR>
nnoremap <leader>dj :lua require'dap'.down()<CR>
nnoremap <leader>d_ :lua require'dap'.disconnect();require'dap'.stop();require'dap'.run_last()<CR>
nnoremap <leader>dr :lua require'dap'.repl.open({}, 'vsplit')<CR><C-w>l
nnoremap <leader>di :lua require'dap.ui.variables'.hover()<CR>
vnoremap <leader>di :lua require'dap.ui.variables'.visual_hover()<CR>
nnoremap <leader>d? :lua require'dap.ui.variables'.scopes()<CR>
nnoremap <leader>de :lua require'dap'.set_exception_breakpoints({"all"})<CR>
nnoremap <leader>da :lua require'debugHelper'.attach()<CR>
nnoremap <leader>dA :lua require'debugHelper'.attachToRemote()<CR>
nnoremap <leader>di :lua require'dap.ui.widgets'.hover()<CR>
nnoremap <leader>d? :lua local widgets=require'dap.ui.widgets';widgets.centered_float(widgets.scopes)<CR>

lua require('gitsigns').setup()



